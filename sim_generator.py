# generated by zing-zongs from venus

import json
import os
import random
from faker import Faker
import pandas as pd
from datetime import datetime

fake = Faker()
Faker.seed(42)
random.seed(42)

TEMPLATE_STORE = "templates/templates.json"   # persistent store for templates
os.makedirs("templates", exist_ok=True)

# Built-in templates (varied sophistication)
DEFAULT_PHISH_TEMPLATES = [
    {"id": "ph_01", "subject": "Urgent: Verify your {service} account",
     "body": "Hi {name},\n\nWe detected suspicious activity on your {service} account. Please verify your account here: {link}\n\nRegards,\n{org} Security Team",
     "severity": 0.9, "tags":["credential_phish","urgency"]},
    {"id": "ph_02", "subject": "Your {service} payment failed - action required",
     "body": "Dear {name},\n\nYour recent payment to {service} failed. Update billing: {link}\n\nThanks,\nBilling Dept",
     "severity": 0.7, "tags":["billing","scare"]},
    {"id": "ph_03", "subject": "Claim your {reward} now",
     "body": "Hello {name},\n\nCongratulations — you have been selected to receive a {reward}. Redeem here: {link}\n\nTeam",
     "severity": 0.6, "tags":["social_engineer","reward"]},
    {"id": "ph_04", "subject": "Important: Password reset required for {service}",
     "body": "Hi {name},\n\nWe require that you reset your password within 24 hours: {link}\n\nIf you didn't request this, contact support.",
     "severity": 0.85, "tags":["credential_phish","timelock"]},
    {"id": "ph_05", "subject": "Package delivery problem — action needed",
     "body": "Hi {name},\n\nWe couldn't deliver your parcel. Pay shipping to release: {link}\n\nLogistics",
     "severity": 0.55, "tags":["parcel","payment"]}
]

DEFAULT_BENIGN_TEMPLATES = [
    {"id": "bn_01", "subject": "Meeting moved to {time}",
     "body": "Hi {name},\n\nThe meeting has been moved to {time}. Please confirm.\n\nThanks,\n{org}",
     "severity": 0.0, "tags":["calendar","meeting"]},
    {"id": "bn_02", "subject": "Invoice for last month attached",
     "body": "Hi {name},\n\nPlease find attached the invoice for last month.\n\nRegards,\nFinance",
     "severity": 0.0, "tags":["billing"]},
    {"id": "bn_03", "subject": "Lunch tomorrow? {place}",
     "body": "Hey {name},\n\nAnyone up for lunch at {place} tomorrow?\n\nCheers,\n{colleague}",
     "severity": 0.0, "tags":["casual"]},
    {"id": "bn_04", "subject": "Weekly update: {topic}",
     "body": "Hi team,\n\nAttached is the weekly update on {topic}. Please review.\n\nThanks",
     "severity": 0.0, "tags":["newsletter"]},
    {"id": "bn_05", "subject": "Welcome aboard!",
     "body": "Hi {name},\n\nWelcome to the team! Here are a few resources to get started.\n\nBest,\nHR",
     "severity": 0.0, "tags":["onboarding"]}
]

# ----------------------
# Template library utils
# ----------------------
def _ensure_template_store():
    if not os.path.exists(TEMPLATE_STORE):
        templates = {"phish": DEFAULT_PHISH_TEMPLATES, "benign": DEFAULT_BENIGN_TEMPLATES}
        with open(TEMPLATE_STORE, "w", encoding="utf-8") as f:
            json.dump(templates, f, indent=2)

def load_templates():
    _ensure_template_store()
    with open(TEMPLATE_STORE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_templates(templates_dict):
    os.makedirs(os.path.dirname(TEMPLATE_STORE), exist_ok=True)
    with open(TEMPLATE_STORE, "w", encoding="utf-8") as f:
        json.dump(templates_dict, f, indent=2)

def add_template(kind, template):
    """
    kind: 'phish' or 'benign'
    template: dict with keys id, subject, body, severity, tags
    """
    templates = load_templates()
    templates.setdefault(kind, []).append(template)
    save_templates(templates)
    return template

# ----------------------
# Generation helpers
# ----------------------
def _make_link():
    # create plausible-looking but safe domain link for training
    return f"https://{fake.domain_name()}/{fake.word()}{random.randint(10,9999)}"

def _render_template(tpl, name=None):
    name = name or fake.first_name()
    return tpl.format(
        name=name,
        service=random.choice(["email","bank","portal","payroll","account"]),
        link=_make_link(),
        reward=random.choice(["gift card","voucher","cashback","discount"]),
        city=random.choice(["Delhi","London","NYC","Mumbai","Berlin"]),
        time=f"{random.randint(9,17)}:{random.choice(['00','30'])}",
        place=random.choice(["cafeteria","office","meeting room"]),
        event=random.choice(["training","meeting","lecture"]),
        topic=random.choice(["Q3 figures","client feedback","timeline","budget"]),
        org=fake.company(),
        pw=str(random.randint(1000,9999)),
        colleague=fake.first_name()
    )

def generate_one(phishy_prob=0.5, sophistication=None, as_html=False):
    """
    Generate a single sample.
    - phishy_prob: probability the sample is phishing (0..1)
    - sophistication: None or float 0..1 to influence severity weighting (higher -> pick higher severity phish templates)
    - returns: (subject, body, label, metadata_dict)
    metadata contains: template_id, tags, severity, generated_at
    """
    templates = load_templates()
    if random.random() < phishy_prob:
        kind = "phish"
        pool = templates.get("phish", DEFAULT_PHISH_TEMPLATES)
        # if sophistication specified, bias choice toward higher severity
        if sophistication is not None:
            pool = sorted(pool, key=lambda t: t.get("severity", 0))
            cutoff = int((1.0 - min(max(sophistication,0.0),1.0)) * (len(pool)-1))
            # pick from top slice if sophistication high
            start = max(0, cutoff)
            pool = pool[start:]
        tpl = random.choice(pool)
        label = 1
    else:
        kind = "benign"
        pool = templates.get("benign", DEFAULT_BENIGN_TEMPLATES)
        tpl = random.choice(pool)
        label = 0

    subj = _render_template(tpl["subject"])
    body_text = _render_template(tpl["body"])
    # small random personalization noise
    if random.random() < 0.3 and label == 1:
        # add more phishing realism: short greeting or signature
        body_text = f"Hi {fake.first_name()},\n\n{body_text}\n\nThanks,\n{fake.company()} Support"
    elif random.random() < 0.4 and label == 0:
        body_text = f"Hi {fake.first_name()},\n\n{body_text}\n\nRegards,\n{fake.name()}"

    generated_at = datetime.utcnow().isoformat() + "Z"
    metadata = {
        "template_id": tpl.get("id"),
        "tags": tpl.get("tags", []),
        "severity": tpl.get("severity", 0.0),
        "kind": kind,
        "generated_at": generated_at
    }

    if as_html:
        html_body = body_text.replace("\n", "<br/>")
        return subj, html_body, label, metadata
    return subj, body_text, label, metadata

def generate_bulk(n=10, phishy_frac=0.5, sophistication=None, as_html=False, out_csv=None):
    rows = []
    for i in range(n):
        subj, body, label, meta = generate_one(phishy_prob=phishy_frac, sophistication=sophistication, as_html=as_html)
        row = {
            "id": i,
            "subject": subj,
            "body": body,
            "label": label,
            "template_id": meta["template_id"],
            "tags": ",".join(meta["tags"]) if meta.get("tags") else "",
            "severity": meta["severity"],
            "generated_at": meta["generated_at"]
        }
        rows.append(row)
    df = pd.DataFrame(rows)
    if out_csv:
        os.makedirs(os.path.dirname(out_csv), exist_ok=True)
        df.to_csv(out_csv, index=False)
    return df


if __name__ == "__main__":
    print("Generating sample phishing + benign emails:")
    df = generate_bulk(n=10, phishy_frac=0.6, sophistication=0.7, as_html=False)
    print(df.head().to_string(index=False))
    df.to_csv("data/generator_sample.csv", index=False)
    print("Wrote data/generator_sample.csv")
